package provider

import (
	"context"
	"github.com/elasticpath/terraform-provider-epcc/external/sdk/epcc"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func dataSourceEpccPromotion() *schema.Resource {
	return &schema.Resource{
		ReadContext: addDiagToContext(dataSourceEpccPromotionRead),
		Schema: map[string]*schema.Schema{
			"id":             {Type: schema.TypeString, Required: true},
			"name":           {Type: schema.TypeString, Computed: true, Description: "Specifies a name for the promotion."},
			"description":    {Type: schema.TypeString, Computed: true, Description: "Specifies a description for the promotion."},
			"enabled":        {Type: schema.TypeBool, Computed: true, Description: "Specifies whether the promotion is enabled. The options are `true` or `false`, and the default setting is `false`."},
			"automatic":      {Type: schema.TypeBool, Optional: true, Description: "Specifies whether the promotion is applied automatically to the cart or a code is required to apply the promotion. The default setting is `false`. When this value is set `true`, a code is autogenerated. If this value is set `false`, you must create the code manually"},
			"promotion_type": {Type: schema.TypeString, Computed: true, Description: "Specifies the type of the promotion."},
			"schema": {Type: schema.TypeList, Required: true,
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"currencies": {Type: schema.TypeList, Optional: true,
						Elem: &schema.Resource{Schema: map[string]*schema.Schema{
							"currency": {Type: schema.TypeString, Optional: true},
							"amount":   {Type: schema.TypeInt, Optional: true},
						}}},
				}}},
			"start": {Type: schema.TypeString, Computed: true, Description: "Specifies the start date and time of the promotion or the start date of the promotion. You can provide a specific time in the HH:MM format. For example, `\"start\": \"2000-01-01 12:00\"`."},
			"end":   {Type: schema.TypeString, Computed: true, Description: "Specifies the end date and time of the promotion or the end date of the promotion."},
			"min_cart_value": {Type: schema.TypeList, Optional: true, Description: "Provide the minimum cart value required for the promotion to apply.",
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"promotion": {Type: schema.TypeString, Optional: true},
					"amount":    {Type: schema.TypeInt, Optional: true},
				}}},
			"max_discount_value": {Type: schema.TypeList, Optional: true, Description: "Provides the maximum possible discount for the cart",
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"promotion": {Type: schema.TypeString, Optional: true},
					"amount":    {Type: schema.TypeInt, Optional: true},
				}}},
		},
	}
}

func dataSourceEpccPromotionRead(ctx context.Context, d *schema.ResourceData, m interface{}) {
	client := m.(*epcc.Client)

	promotionId := d.Get("id").(string)
	promotion, err := epcc.Promotions.Get(&ctx, client, promotionId)
	if err != nil {
		ReportAPIError(ctx, err)
		return
	}

	d.Set("type", promotion.Data.Type)
	d.Set("name", promotion.Data.Name)
	d.Set("description", promotion.Data.Description)
	d.Set("enabled", promotion.Data.Enabled)
	d.Set("automatic", promotion.Data.Automatic)
	d.Set("promotion_type", promotion.Data.PromotionType)
	d.Set("schema", promotion.Data.Schema)
	d.Set("start", promotion.Data.Start)
	d.Set("end", promotion.Data.End)
	d.Set("min_cart_value", promotion.Data.MinCartValue)
	d.Set("max_discount_value", promotion.Data.MaxDiscountValue)

	d.SetId(promotion.Data.Id)
}
